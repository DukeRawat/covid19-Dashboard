{"version":3,"sources":["xhr/fetchApi.js","components/Map.js","components/GlobalStat.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["makeRequest","a","url","body","method","headers","fetch","response","ok","message","text","responseText","Error","status","json","console","error","Map","state","lat","lng","zoom","countries","then","data","setState","Array","from","markerList","this","map","country","Marker","position","countryInfo","long","Popup","style","marginTop","border","borderTop","cases","active","deaths","recovered","Fragment","Row","className","Col","xs","lg","MapContainer","center","scrollWheelZoom","TileLayer","attribution","Component","GlobalStat","props","Alert","variant","Badge","Heading","heading","stat","Bar","graphType","options","low","type","showArea","lineSmooth","Chartist","Interpolation","cardinal","tension","axisX","labelOffset","x","y","axisY","offset","labelInterpolationFnc","value","labels","series","Object","entries","key","push","populateData","React","App","useState","Spinner","animation","setActive","setDeaths","setRecovered","useEffect","Container","md","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2c1fb1a.chunk.js","sourcesContent":["export default async function makeRequest({\r\n    url,\r\n    body = {},\r\n    method = 'GET',\r\n    headers = {},\r\n  }) {\r\n    //const bodyString = JSON.stringify(body)\r\n    let json; let response;\r\n  \r\n    if(method === 'GET') {\r\n        response = await fetch(url, {\r\n            method,\r\n            // body: bodyString,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...headers,\r\n            },\r\n          });\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      let message = `Failed api request to ${url}`\r\n      try {\r\n        const responseText = await response.text()\r\n        if (responseText) {\r\n          message += responseText\r\n        }\r\n      } catch (e) {\r\n        throw new Error(`Api request to ${url}: ${message} ${response.status}`)\r\n      }\r\n    }\r\n    try {\r\n      // incase the the server returns invalid json\r\n      json = await response.json()\r\n    } catch (e) {\r\n      console.error('Response error:',e.message);\r\n    }\r\n    return json\r\n  };","import React, { Component } from 'react'\r\nimport {Container, Row, Col} from 'react-bootstrap'\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport makeRequest from '../xhr/fetchApi';\r\n\r\nexport default class Map extends Component {\r\n    state = {\r\n        lat: 20,\r\n        lng: 77,\r\n        zoom: 5,\r\n        countries: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        const res = makeRequest({\r\n            url : 'https://corona.lmao.ninja/v3/covid-19/countries'\r\n        });\r\n       // let data = res.then(data => data);\r\n       res.then(data => {\r\n           this.setState({countries: Array.from(data)});\r\n       });\r\n    };\r\n\r\n    render() {\r\n        //const countries = this.state.countries;\r\n       // console.log('this.state.countries',this.state.countries);\r\n        const markerList = this.state.countries.map((country) =>\r\n            <Marker position={[country.countryInfo.lat, country.countryInfo.long]}>\r\n                <Popup>\r\n                    Country: {country.country}\r\n                    <hr style={{marginTop: 0, border: 0, borderTop: '2px solid rgba(249, 4, 4, 0.74)'}}/>\r\n                    Total Cases: {country.cases} <br />\r\n                    Active Cases: {country.active} <br />\r\n                    Deaths Observed: {country.deaths} <br />\r\n                    Recovered Patients: {country.recovered}\r\n                </Popup>\r\n            </Marker>\r\n        );\r\n        return (\r\n            <React.Fragment>\r\n            {/* Stack the columns on mobile by making one full-width and the other half-width */}\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col xs={12} lg={11}>\r\n                    <MapContainer center={[this.state.lat, this.state.lng]} zoom={this.state.zoom} scrollWheelZoom={true}>\r\n                        <TileLayer\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        <Marker position={[this.state.lat, this.state.lng]}>\r\n                        <Popup>\r\n                            A pretty CSS3 popup. <br /> Easily customizable.\r\n                        </Popup>\r\n                        </Marker>\r\n                        {markerList}\r\n                    </MapContainer>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <hr/>\r\n                </Col>\r\n            </Row>\r\n            </React.Fragment>\r\n         )\r\n     }\r\n }\r\n ","import React from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\nfunction GlobalStat(props) {\r\n    return (\r\n        <Alert variant={props.variant} className='h-cover'>\r\n            <h6><Badge variant=\"secondary\">Global</Badge></h6>\r\n            <Alert.Heading>{props.heading}:</Alert.Heading>\r\n            <hr />\r\n            <p className=\"mb-0\">\r\n                {props.stat}\r\n            </p>\r\n        </Alert>\r\n    );\r\n}\r\n\r\nexport default GlobalStat;","import React from 'react';\r\nimport Chartist from 'chartist';\r\nimport ChartistGraph from 'react-chartist';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport makeRequest from '../xhr/fetchApi';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\nexport default class Bar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cases: {},\r\n            deaths: {},\r\n            recovered: {},\r\n            graphType: 'Line',\r\n            options: {\r\n                low: (this.props.type === 'cases') ? 145000000 : (this.props.type === 'deaths') ? 3200000 : 92000000,\r\n                showArea: true,\r\n                lineSmooth: Chartist.Interpolation.cardinal({\r\n                    tension: 0.2\r\n                }),\r\n                axisX: {\r\n                    labelOffset: {\r\n                        x: -20,\r\n                        y: 0\r\n                    }\r\n                },\r\n                axisY: {\r\n                    offset: 50,\r\n                    labelInterpolationFnc: function (value) {\r\n                        return (value / 1000) + 'k';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const res = makeRequest({\r\n            url : 'https://corona.lmao.ninja/v3/covid-19/historical/all?lastdays=7'\r\n        });\r\n       res.then(data => {\r\n           this.setState({cases: data.cases});\r\n           this.setState({deaths: data.deaths});\r\n           this.setState({recovered: data.recovered});\r\n       });\r\n    }\r\n     populateData() {\r\n        var labels=[], series=[];\r\n        switch (this.props.type) {\r\n            case 'cases':\r\n                for (const [key, value] of Object.entries(this.state.cases)) {\r\n                    labels.push(key);\r\n                    series.push(value);\r\n                }\r\n                break;\r\n            case 'deaths':\r\n                for (const [key, value] of Object.entries(this.state.deaths)) {\r\n                    labels.push(key);\r\n                    series.push(value);\r\n                }\r\n                break;\r\n            case 'recovered':\r\n                for (const [key, value] of Object.entries(this.state.recovered)) {\r\n                    labels.push(key);\r\n                    series.push(value);\r\n                }\r\n                break;\r\n            default:\r\n                 return {\r\n                    labels: [1, 2, 3, 4, 5, 6, 7, 8],\r\n                    series: [\r\n                      [5, 9, 7, 8, 5, 3, 5, 4]\r\n                    ]\r\n                };\r\n        }\r\n        return {\r\n            labels: labels,\r\n            series: [series]\r\n        };\r\n    };\r\n    render() {\r\n        var data = this.populateData();\r\n        return (\r\n            <Alert variant='secondary' className='h-cover'>\r\n                <Alert.Heading>{(this.props.type === 'cases') ? 'Cases History' : (this.props.type === 'deaths') ? 'Deaths History' : 'Recovery History'}:</Alert.Heading>\r\n                <h5><Badge variant=\"secondary\">7 Day period</Badge></h5>\r\n                <hr />\r\n                <ChartistGraph className={(this.props.type === 'cases') ? 'ct-octave cases-chart' : (this.props.type === 'deaths') ? 'ct-octave deaths-chart' : 'ct-octave recovery-chart'} data={data} options={this.state.options} type={this.state.graphType} />\r\n            </Alert>\r\n        )\r\n    }\r\n}","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Map from './components/Map';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport GlobalStat from './components/GlobalStat';\nimport makeRequest from './xhr/fetchApi';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Graph from './components/Graph';\n\nfunction App() {\n  const [active, setActive] = useState(<Spinner animation=\"grow\" />);\n  const [deaths, setDeaths] = useState(<Spinner animation=\"grow\" />);\n  const [recovered, setRecovered] = useState(<Spinner animation=\"grow\" />);\n  useEffect(() => {\n    const res = makeRequest({\n      url : 'https://corona.lmao.ninja/v3/covid-19/all'\n      });\n      res.then(data => {\n          setActive(data.active);\n          setDeaths(data.deaths);\n          setRecovered(data.recovered);\n      });\n  });\n  return (\n    <div className=\"App-header\">\n      <header className=\"\">\n        <h1>Covid-19 Trends Dashboard</h1>\n      </header>\n      <Container>\n        <Map/>\n        <Row>\n            <Col xs={12} md={4}>\n              <GlobalStat className='active-card' variant='primary' stat={active} heading='Active Covid19 Cases'></GlobalStat>\n            </Col>\n            <Col xs={12} className='col_show_xs'>\n                <hr/>\n            </Col>\n            <Col xs={12} md={4}>\n              <GlobalStat variant='danger' stat={deaths} heading='Deaths Observed'></GlobalStat>\n            </Col>\n            <Col xs={12} className='col_show_xs'>\n                <hr/>\n            </Col>\n            <Col xs={12} md={4}>\n              <GlobalStat variant='success' stat={recovered} heading='Recovered Covid19 Cases'></GlobalStat>\n            </Col>\n        </Row>\n        <Row>\n            <Col xs={12}>\n                <hr/>\n            </Col>\n        </Row>\n        <Row>\n            <Col xs={12} md={6}>\n              <Graph type='cases'/>\n            </Col>\n            <Col xs={12} className='col_show_xs'>\n                <hr/>\n            </Col>\n            <Col xs={12} md={6}>\n              <Graph type='deaths'/>\n            </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n            <Col xs={12}>\n                <hr/>\n            </Col>\n            <Col xs={12} md={8} lg={7}>\n              <Graph type='recovered'/>\n            </Col>\n            <Col xs={12}>\n                <hr/>\n            </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}